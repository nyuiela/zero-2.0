// Basic type definitions for the swap-bridge-ui package

import { useInjectedStore } from "../state/injected-provider";

export interface ChainDto {
  id: number;
  name: string;
  rpc?: string;
  rpcUrls: string[];
  blockExplorerUrls: string[];
  nativeCurrency: {
    name: string;
    symbol: string;
    decimals: number;
  };
  testnet: boolean;
  solana: boolean;
}

export interface DeploymentDto {
  id: string;
  name: string;
  type: string;
  l1ChainId: number;
  l2ChainId: number;
}

export interface SuperbridgeConfigDto {
  highlightedTokens: Array<{
    deploymentName: string;
    address: string;
  }>;
}

export interface AcrossDomainDto {
  id: string;
  name: string;
  chainId: number;
}

export interface CcipDomainDto {
  id: string;
  name: string;
  chainId: number;
}

export interface CctpDomainDto {
  id: string;
  name: string;
  chainId: number;
}

export interface EcoDomainDto {
  id: string;
  name: string;
  chainId: number;
}

export interface HyperlaneMailboxDto {
  id: string;
  name: string;
  chainId: number;
}

export interface LzDomainDto {
  id: string;
  name: string;
  chainId: number;
}

export interface OpInteropDomainDto {
  id: string;
  name: string;
  chainId: number;
}

export interface RelayDomainDto {
  id: string;
  name: string;
  chainId: number;
}

export interface SignetChildDto {
  id: string;
  name: string;
  chainId: number;
}

export interface SignetHostDto {
  id: string;
  name: string;
  chainId: number;
}

export interface DefaultRouteDto {
  id: string;
  name: string;
}

export interface BridgeConfigDtoTos {
  accepted: boolean;
}

export interface AppConfig {
  name: string;
  description: string;
} 

// Route provider types
export type RouteProvider = "across" | "ccip" | "cctp" | "hyperlane" | "lz" | "optimism" | "relay";


// Multi-chain token type
export interface MultiChainToken {
  [chainId: number]: {
    address: string;
    symbol: string;
    name: string;
    decimals: number;
    chainId: number;
  };
} 

export const formatDecimals = (value: number, decimals: number = 4): string => {
  return value.toFixed(decimals);
}; 



/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * API
 * API docs
 * OpenAPI spec version: 1.0
 */

export interface ThemeDto {
  accent?: string;
  'accent-dark'?: string;
  'accent-foreground'?: string;
  'accent-foreground-dark'?: string;
  background?: string;
  'background-dark'?: string;
  backgroundImageBlendMode?: string;
  backgroundImageBlendModeDark?: string;
  backgroundImageOpacity?: string;
  backgroundImageOpacityDark?: string;
  backgroundImagePosition?: string;
  backgroundImageRepeat?: string;
  backgroundImageSize?: string;
  backgroundImageStyle?: string;
  border?: string;
  'border-dark'?: string;
  card?: string;
  'card-dark'?: string;
  'card-foreground'?: string;
  'card-foreground-dark'?: string;
  darkModeEnabled?: boolean;
  destructive?: string;
  'destructive-dark'?: string;
  'destructive-foreground'?: string;
  'destructive-foreground-dark'?: string;
  fontBody?: string;
  fontButton?: string;
  fontHeading?: string;
  foreground?: string;
  'foreground-dark'?: string;
  imageBackground?: string;
  imageBackgroundDark?: string;
  imageLogo?: string;
  imageLogoDark?: string;
  imageNetwork?: string;
  imageOg?: string;
  imageSuperbridgeLogo?: string;
  imageSuperbridgeLogoDark?: string;
  input?: string;
  'input-dark'?: string;
  muted?: string;
  'muted-dark'?: string;
  'muted-foreground'?: string;
  'muted-foreground-dark'?: string;
  popover?: string;
  'popover-dark'?: string;
  'popover-foreground'?: string;
  'popover-foreground-dark'?: string;
  primary?: string;
  'primary-dark'?: string;
  'primary-foreground'?: string;
  'primary-foreground-dark'?: string;
  radius?: string;
  rainbowMode?: string;
  ring?: string;
  'ring-dark'?: string;
  secondary?: string;
  'secondary-dark'?: string;
  'secondary-foreground'?: string;
  'secondary-foreground-dark'?: string;
}



export type DeploymentType = typeof DeploymentType[keyof typeof DeploymentType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeploymentType = {
  mainnet: 'mainnet',
  testnet: 'testnet',
  devnet: 'devnet',
} as const;


export const useLzDomains = () => {
  return useInjectedStore((s) => s.lzDomains);
};
