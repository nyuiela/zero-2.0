use std::process;
use std::env;
use std::sync::Arc;

use axum::routing::{ get, post };
use axum::{ middleware, Router };
// use db::comment::{ create_comment, get_comments };
// use db::saved_auction::{ create_saved_auction, get_saved_auctions, get_saved_auctions_by_user };
use dotenv::dotenv;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use db::{ establish_connection };
use tower_http::cors::{ Any, CorsLayer };

use host::saved_auction::create_saved_auction;
use host::saved_auction::get_saved_auctions;
use host::saved_auction::get_saved_auctions_by_user;
use host::{
    car::{ get_all_cars_handler, create_car, get_car_by_id },
    auction::{ get_auction_by_id, get_auctions, create_auction },
    bid::{ get_bid_by_id, get_bids, create_bid },
    comment::{ create_comment, get_comments },
};

use host::{
    overall::init_overall_handler,
    auth::{ auth, verify_auth_handler, verify_signature_handler, get_verify_handler },
    auction::init_auction_handler,
    bid::init_bid_handler,
    car::init_car_handler,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenv().ok();
    let database_url = env::var("DATABASE_URL").unwrap_or_else(|_| {
        eprintln!("Error: DATABASE_URL environment variable is required");
        eprintln!("Please make sure you have a .env file with DATABASE_URL set");
        eprintln!("Example: DATABASE_URL=postgres://user:password@localhost:5432/car_auction");
        process::exit(1);
    });
    let db = establish_connection(&database_url).await?;
    let db = Arc::new(db);
    // let cars = get_all_cars(&db).await.unwrap();
    // get_car_merkle_hash(cars);
    // let leaves = get_car_leaves(&cars);

    let cors = CorsLayer::new()
        .allow_origin(Any) // allow frontend origin
        .allow_methods(Any) // or restrict: .allow_methods([Method::GET, Method::POST])
        .allow_headers(Any); // or restrict

    // Create the router with our endpoints
    let protected_routes = Router::new()
        .route("/api/cars", post(create_car))
        .route("/api/auctions", post(create_auction))
        .route("/api/bids", post(create_bid))
        .route("/api/comment", post(create_comment))
        .route("/api/save_auction", post(create_saved_auction)) // save auction
        .route_layer(middleware::from_fn(auth))
        .with_state(db.clone());

    let app = Router::new()
        .route("/api/cars/{id}", get(get_car_by_id))
        .route("/api/cars", get(get_all_cars_handler))
        .route("/api/auctions", get(get_auctions))
        .route("/api/auctions/{id}", get(get_auction_by_id))
        .route("/api/bids", get(get_bids))
        .route("/api/bids/{id}", get(get_bid_by_id))
        //comment
        .route("/api/comments/{id}", get(get_comments))
        // save
        .route("/api/saved_auctions/{user}", get(get_saved_auctions_by_user)) // get user saved items
        .route("/api/auctions/saved/{id}", get(get_saved_auctions)) // get all saved by auction_id
        //init
        .route("/api/auctions/init", get(init_auction_handler))
        .route("/api/cars/init", get(init_car_handler))
        .route("/api/bids/init", get(init_bid_handler))
        .route("/api/db/init", get(init_overall_handler))

        // verify auth
        .route("/api/auth", get(get_verify_handler))
        .route("/api/auth", post(verify_signature_handler))
        .route("/api/auth/verify", post(verify_auth_handler))
        .merge(protected_routes)
        .layer(cors)
        .with_state(db);

    // Now you can use the entity types directly
    // for car in cars {
    //     println!("Car: {:?}", car);
    // }

    // print!("cars: {:?}", cars);
    // get_car_merkle_hash();
    // let db = Arc::new(db);
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber
        ::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    // let input: u32 = 15 * u32::pow(2, 27) + 1;
    // let input = get_car_leaves(cars)[0];
    // let env = ExecutorEnv::builder().write(&leaves).unwrap().build().unwrap();

    // Obtain the default prover.
    // let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    // let prove_info = prover.prove(env, INIT_ELF).unwrap();

    // extract the receipt.
    // let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    // let output: AuctionState = receipt.journal.decode().unwrap();
    // print!("{:?}", output);
    // print!("{:?}", receipt);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    // receipt.verify(INIT_ID).unwrap();
    // Start the server
    let listener = tokio::net::TcpListener::bind("0.0.0.0:3001").await?;
    println!("Server running on http://0.0.0.0:3001");
    axum::serve(listener, app.into_make_service()).await?;
    Ok(())
}

// fn get_car_merkle_hash(cars: Vec<CarModel>) {
//     let mut leaves = vec![];
//     // let tree: Vec<&'static str> = vec!["s", "ss"];
//     for car in cars {
//         let car_record = format!(
//             "{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{:?}:{}:{}",
//             car.id,
//             car.make,
//             car.model,
//             car.year,
//             car.color,
//             car.mileage,
//             car.vin,
//             car.transmission,
//             car.fuel_type,
//             car.engine_size,
//             car.exterior_color,
//             car.interior_color,
//             car.odometer,
//             car.description,
//             car.image_url,
//             car.auction_id,
//             car.starting_price,
//             car.current_price,
//             car.auction_status.clone().unwrap(),
//             // "status"
//             car.created_at.and_utc().timestamp(),
//             car.updated_at.and_utc().timestamp()
//         );
//         // car_record = format!("{{}}:{}:{}", id, id);
//         print!("{} \n", car_record);
//         leaves.push(sha256(car_record.as_bytes()));
//     }
//     // let le = format!(leaves.iter());
//     print!("{:?}", leaves[0])

//     // Ok(())
// }
