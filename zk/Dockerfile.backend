# Use the official Rust image as base
FROM rust:1.75-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    pkg-config \
    libssl-dev \
    libpq-dev \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install RISC0 toolchain
RUN curl -L https://github.com/risc0/risc0/releases/download/v0.20.1/risc0-v0.20.1-linux-x86_64.tar.gz | tar -xz -C /usr/local/bin --strip-components=1

# Set working directory
WORKDIR /app

# Copy the entire workspace
COPY . .

# Create a new empty project for cargo vendor
RUN mkdir -p /tmp/vendor && cd /tmp/vendor && cargo init

# Vendor dependencies for offline builds
RUN cd /tmp/vendor && cargo vendor /app/vendor

# Copy vendor directory to app
RUN cp -r /tmp/vendor/vendor /app/

# Build the project
RUN cargo build --release --package host

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libpq5 \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 rustuser

# Set working directory
WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/target/release/host /app/host

# Copy any necessary files (like methods ELF files)
COPY --from=builder /app/methods /app/methods

# Change ownership to non-root user
RUN chown -R rustuser:rustuser /app

# Switch to non-root user
USER rustuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/cars || exit 1

# Run the application
CMD ["./host"] 